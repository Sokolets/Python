import os
import re
import requests
import telebot
from telebot import types
from urllib.parse import urlparse

TOKEN = "7880538740:AAFjAih_0pgCtbhvzheRH-M3Mixm23Gx2b8"
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
LANGUAGES = {
    'en': {
        'start': "üëã Hello! Send me a TikTok video link and I'll download it for you without watermark.",
        'help': "üìå Just send me a TikTok video link (e.g., https://vm.tiktok.com/xxxxx/) and I'll send you the video without watermark.",
        'invalid_link': "‚ùå Invalid TikTok link. Please send a valid link.",
        'downloading': "‚è≥ Downloading your video...",
        'error': "‚ö†Ô∏è Error downloading the video. Please try another link or try again later.",
        'language_set': "üåê Language set to English.",
        'too_large': "üìÅ The video is too large to send via Telegram (max 50MB). Try a shorter video."
    },
    'ru': {
        'start': "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.",
        'help': "üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://vm.tiktok.com/xxxxx/), –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.",
        'invalid_link': "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ TikTok. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.",
        'downloading': "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∞—à–µ –≤–∏–¥–µ–æ...",
        'error': "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
        'language_set': "üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π.",
        'too_large': "üìÅ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–º–∞–∫—Å. 50MB). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ."
    },
    'uk': {
        'start': "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ TikTok, —ñ —è –∑–∞–≤–∞–Ω—Ç–∞–∂—É –π–æ–≥–æ –¥–ª—è —Ç–µ–±–µ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.",
        'help': "üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ TikTok (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://vm.tiktok.com/xxxxx/), —ñ —è –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ –≤—ñ–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.",
        'invalid_link': "‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ TikTok. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.",
        'downloading': "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤–∞—à–µ –≤—ñ–¥–µ–æ...",
        'error': "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø—ñ–∑–Ω—ñ—à–µ.",
        'language_set': "üåê –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É.",
        'too_large': "üìÅ –í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–º–∞–∫—Å. 50MB). –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç—à–µ –≤—ñ–¥–µ–æ."
    }
}

user_language = {}


def send_other_projects(chat_id, language):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö"""
    projects_text = {
        'en': "üöÄ Our other cool projects:\n\n"
              "1. @BestMemesBot - Fresh memes daily\n"
              "2. @MusicDownloaderPro - Download any song\n"
              "Try them out!",

        'ru': "üöÄ –ù–∞—à–∏ –¥—Ä—É–≥–∏–µ –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n\n"
              "1. @BestMemesBot - –°–≤–µ–∂–∏–µ –º–µ–º—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
              "2. @MusicDownloaderPro - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª—é–±–æ–π –º—É–∑—ã–∫–∏\n"
              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Ö!",

        'uk': "üöÄ –ù–∞—à—ñ —ñ–Ω—à—ñ –∫—Ä—É—Ç—ñ –ø—Ä–æ–µ–∫—Ç–∏:\n\n"
              "1. @BestMemesBot - –°–≤—ñ–∂—ñ –º–µ–º–∏ —â–æ–¥–Ω—è\n"
              "2. @MusicDownloaderPro - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó –º—É–∑–∏–∫–∏\n"
              "–°–ø—Ä–æ–±—É–π—Ç–µ —ó—Ö!"
    }
    text = projects_text.get(language, projects_text['en'])
    bot.send_message(chat_id, text, disable_web_page_preview=True)


def is_valid_tiktok_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º TikTok URL"""
    domains = [
        'tiktok.com',
        'vm.tiktok.com',
        'vt.tiktok.com',
        'www.tiktok.com',
        'm.tiktok.com'
    ]
    parsed = urlparse(url)
    return any(domain in parsed.netloc for domain in domains)


def download_tiktok_video(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ TikTok –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
    API_ENDPOINTS = [
        "https://api.tiklydown.eu.org/api/download",
        "https://tikdown.org/api/ajaxSearch",
        "https://www.tikwm.com/api/"
    ]

    for api_url in API_ENDPOINTS:
        try:
            if "tiklydown" in api_url:
                response = requests.get(f"{api_url}?url={url}", timeout=10)
                data = response.json()
                return data.get('video', {}).get('noWatermark')

            elif "tikdown" in api_url:
                headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                response = requests.post(api_url, data=f"q={url}", headers=headers, timeout=10)
                data = response.json()
                return data.get('links', [{}])[0].get('a')

            elif "tikwm" in api_url:
                response = requests.get(f"{api_url}?url={url}", timeout=10)
                data = response.json()
                return data.get('data', {}).get('play')
        except:
            continue
    return None


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_language[user_id] = 'en'

    markup = types.InlineKeyboardMarkup()
    btn_en = types.InlineKeyboardButton("English", callback_data='lang_en')
    btn_ru = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru')
    btn_uk = types.InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='lang_uk')
    markup.add(btn_en, btn_ru, btn_uk)

    bot.reply_to(message, LANGUAGES['en']['start'], reply_markup=markup)


@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    lang = user_language.get(user_id, 'en')
    bot.reply_to(message, LANGUAGES[lang]['help'])


@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def change_language(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    user_id = call.from_user.id
    lang = call.data.split('_')[1]
    user_language[user_id] = lang
    bot.answer_callback_query(call.id, LANGUAGES[lang]['language_set'])
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=LANGUAGES[lang]['start']
    )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    lang = user_language.get(user_id, 'en')

    if not is_valid_tiktok_url(message.text):
        bot.reply_to(message, LANGUAGES[lang]['invalid_link'])
        return

    url = message.text if message.text.startswith('http') else f'https://{message.text}'

    progress_msg = bot.reply_to(message, LANGUAGES[lang]['downloading'])

    try:
        video_url = download_tiktok_video(url)

        if not video_url:
            bot.reply_to(message, LANGUAGES[lang]['error'])
            return

        head = requests.head(video_url, allow_redirects=True, timeout=10)
        file_size = int(head.headers.get('content-length', 0))

        if file_size > 50 * 1024 * 1024:
            bot.reply_to(message, LANGUAGES[lang]['too_large'])
            return

        response = requests.get(video_url, stream=True, timeout=20)
        filename = f"tiktok_{user_id}.mp4"

        with open(filename, 'wb') as f:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    f.write(chunk)

        with open(filename, 'rb') as video_file:
            bot.send_video(
                message.chat.id,
                video_file,
                caption="‚úÖ Here's your TikTok video without watermark" if lang == 'en' else
                "‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –∏–∑ TikTok –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞" if lang == 'ru' else
                "‚úÖ –í–∞—à–µ –≤—ñ–¥–µ–æ –∑ TikTok –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞",
                timeout=100
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
        send_other_projects(message.chat.id, lang)

        os.remove(filename)

    except Exception as e:
        print(f"Error: {e}")
        bot.reply_to(message, LANGUAGES[lang]['error'])
    finally:
        try:
            bot.delete_message(message.chat.id, progress_msg.message_id)
        except:
            pass


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)