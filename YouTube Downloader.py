import logging
import os
import re
import asyncio
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext,
    ContextTypes,
)
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB
MAX_DURATION = 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É


class Language:
    def __init__(self):
        self.strings = {
            'en': {
                'start': 'üé¨ <b>YouTube Video Downloader</b>\n\nSend me a YouTube link and I\'ll download the video for you!',
                'help': '‚ÑπÔ∏è <b>How to use:</b>\n\n1. Send a YouTube video link\n2. Wait for download\n3. Get your video!',
                'unsupported': '‚ùå This is not a YouTube link. Please send a valid YouTube URL.',
                'error': '‚ö†Ô∏è An error occurred. Please try again later.',
                'downloading': '‚è≥ Downloading your video...',
                'language_set': '‚úÖ Language has been set to English.',
                'select_language': 'üåê <b>Please select your language:</b>',
                'invalid_url': '‚ùå Invalid URL. Please send a valid YouTube link.',
                'too_large': '‚ùå Video is too large (max 50MB). Try a shorter video.',
                'not_found': '‚ùå Video not found or unavailable.',
                'sending': 'üì§ Sending your video...',
                'duration_limit': '‚è±Ô∏è Video is too long (max 15 minutes).',
                'processing': 'üîÑ Processing your request...',
                'private': 'üîí This video is private or requires login.',
                'age_restricted': 'üîû Age-restricted content cannot be downloaded.',
                'other_bots': 'ü§ñ <b>Check out our other bots:</b>\n\n'
                              '1. @InstagramDownloaderBot - Download Instagram videos\n'
                              '2. @TikTokSaverBot - Save TikTok videos\n'
                              '3. @UniversalMediaBot - Download from 100+ sites',
                'duration_info': 'üìù <b>Note:</b> I can only download videos up to 15 minutes long.'
            },
            'ru': {
                'start': 'üé¨ <b>YouTube Video Downloader</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å!',
                'help': '‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube\n2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏\n3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ!',
                'unsupported': '‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É YouTube.',
                'error': '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'downloading': '‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∞—à–µ –≤–∏–¥–µ–æ...',
                'language_set': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π.',
                'select_language': 'üåê <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:</b>',
                'invalid_url': '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É YouTube.',
                'too_large': '‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 50MB).',
                'not_found': '‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.',
                'sending': 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à–µ –≤–∏–¥–µ–æ...',
                'duration_limit': '‚è±Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 15 –º–∏–Ω—É—Ç).',
                'processing': 'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...',
                'private': 'üîí –≠—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞.',
                'age_restricted': 'üîû –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω.',
                'other_bots': 'ü§ñ <b>–ù–∞—à–∏ –¥—Ä—É–≥–∏–µ –±–æ—Ç—ã:</b>\n\n'
                              '1. @InstagramDownloaderBot - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å Instagram\n'
                              '2. @TikTokSaverBot - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å TikTok\n'
                              '3. @UniversalMediaBot - –ó–∞–≥—Ä—É–∑–∫–∞ —Å 100+ —Å–∞–π—Ç–æ–≤',
                'duration_info': 'üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª–∏–Ω–æ–π –¥–æ 15 –º–∏–Ω—É—Ç.'
            },
            'uk': {
                'start': 'üé¨ <b>YouTube Video Downloader</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube –≤—ñ–¥–µ–æ, —ñ —è –∑–∞–≤–∞–Ω—Ç–∞–∂—É –π–æ–≥–æ –¥–ª—è –≤–∞—Å!',
                'help': '‚ÑπÔ∏è <b>–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:</b>\n\n1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube –≤—ñ–¥–µ–æ\n2. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n3. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Å–≤–æ—î –≤—ñ–¥–µ–æ!',
                'unsupported': '‚ùå –¶–µ –Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è YouTube. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è YouTube.',
                'error': '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
                'downloading': '‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤–∞—à–µ –≤—ñ–¥–µ–æ...',
                'language_set': '‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É.',
                'select_language': 'üåê <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–æ–≤—É:</b>',
                'invalid_url': '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è YouTube.',
                'too_large': '‚ùå –í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (–º–∞–∫—Å–∏–º—É–º 50MB).',
                'not_found': '‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.',
                'sending': 'üì§ –ù–∞–¥—Å–∏–ª–∞—é –≤–∞—à–µ –≤—ñ–¥–µ–æ...',
                'duration_limit': '‚è±Ô∏è –í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å–∏–º—É–º 15 —Ö–≤–∏–ª–∏–Ω).',
                'processing': 'üîÑ –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç...',
                'private': 'üîí –¶–µ –≤—ñ–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º –∞–±–æ –≤–∏–º–∞–≥–∞—î –≤—Ö–æ–¥—É.',
                'age_restricted': 'üîû –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.',
                'other_bots': 'ü§ñ <b>–ù–∞—à—ñ —ñ–Ω—à—ñ –±–æ—Ç–∏:</b>\n\n'
                              '1. @InstagramDownloaderBot - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –∑ Instagram\n'
                              '2. @TikTokSaverBot - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –∑ TikTok\n'
                              '3. @UniversalMediaBot - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ 100+ —Å–∞–π—Ç—ñ–≤',
                'duration_info': 'üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –Ø –º–æ–∂—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –¥–æ 15 —Ö–≤–∏–ª–∏–Ω.'
            }
        }

    def get(self, language: str, key: str) -> str:
        return self.strings.get(language, {}).get(key, self.strings['en'][key])


lang = Language()


def get_user_language(user_data: dict) -> str:
    return user_data.get('language', 'en')


def is_youtube_url(url: str) -> bool:
    patterns = [
        r'(https?://)?(www\.)?youtube\.com/watch\?v=.+',
        r'(https?://)?(www\.)?youtube\.com/shorts/.+',
        r'(https?://)?youtu\.be/.+',
        r'(https?://)?(www\.)?youtube\.com/embed/.+',
        r'(https?://)?(www\.)?youtube\.com/v/.+'
    ]
    return any(re.match(pattern, url, re.IGNORECASE) for pattern in patterns)


async def download_youtube_video(url: str, context: CallbackContext) -> Optional[str]:
    ydl_opts = {
        'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        'outtmpl': 'downloads/%(id)s.%(ext)s',
        'quiet': True,
        'no_warnings': True,
        'max_filesize': MAX_FILE_SIZE,
        'noplaylist': True,
        'socket_timeout': 10,
        'retries': 3,
        'fragment_retries': 3,
        'extractor_args': {
            'youtube': {
                'skip': ['dash', 'hls'],
                'player_client': ['android_embedded'],
                'player_skip': ['configs', 'webpage']
            }
        },
        'postprocessor_args': {
            'ffmpeg': ['-loglevel', 'quiet']
        },
        'merge_output_format': 'mp4',
        'http_chunk_size': 1048576,
        'consoletitle': False
    }

    try:
        os.makedirs('downloads', exist_ok=True)

        with YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, url, download=True)

            if not info:
                return None

            if info.get('duration', 0) > MAX_DURATION:
                return 'duration_limit'

            if info.get('age_limit', 0) >= 18:
                return 'age_restricted'

            filename = ydl.prepare_filename(info)
            return filename if os.path.exists(filename) else None

    except DownloadError as e:
        if 'Private video' in str(e) or 'login' in str(e):
            return 'private'
        logger.error(f"Download error: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return None


async def start(update: Update, context: CallbackContext) -> None:
    user_data = context.user_data
    language = get_user_language(user_data)

    keyboard = [
        [InlineKeyboardButton("English", callback_data='lang_en')],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='lang_uk')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(
        lang.get(language, 'start'),
        reply_markup=reply_markup
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ 15-–º–∏–Ω—É—Ç–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
    await update.message.reply_html(lang.get(language, 'duration_info'))


async def help_command(update: Update, context: CallbackContext) -> None:
    user_data = context.user_data
    language = get_user_language(user_data)
    await update.message.reply_html(lang.get(language, 'help'))

    # –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ 15-–º–∏–Ω—É—Ç–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
    await update.message.reply_html(lang.get(language, 'duration_info'))


async def language_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    language_code = query.data.split('_')[1]
    context.user_data['language'] = language_code

    await query.edit_message_text(
        text=lang.get(language_code, 'language_set'),
        parse_mode='HTML'
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ 15-–º–∏–Ω—É—Ç–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
    await query.message.reply_html(lang.get(language_code, 'duration_info'))


async def handle_message(update: Update, context: CallbackContext) -> None:
    user_data = context.user_data
    language = get_user_language(user_data)
    text = update.message.text.strip()

    if not re.match(r'https?://.+', text):
        await update.message.reply_html(lang.get(language, 'invalid_url'))
        return

    if not is_youtube_url(text):
        await update.message.reply_html(lang.get(language, 'unsupported'))
        return

    try:
        await update.message.reply_html(lang.get(language, 'processing'))

        video_path = await download_youtube_video(text, context)

        if video_path == 'duration_limit':
            await update.message.reply_html(lang.get(language, 'duration_limit'))
            return
        elif video_path == 'private':
            await update.message.reply_html(lang.get(language, 'private'))
            return
        elif video_path == 'age_restricted':
            await update.message.reply_html(lang.get(language, 'age_restricted'))
            return

        if video_path and os.path.exists(video_path):
            file_size = os.path.getsize(video_path)

            if file_size > MAX_FILE_SIZE:
                await update.message.reply_html(lang.get(language, 'too_large'))
            else:
                await update.message.reply_html(lang.get(language, 'sending'))
                await update.message.reply_video(
                    video=open(video_path, 'rb'),
                    supports_streaming=True,
                    read_timeout=TIMEOUT,
                    write_timeout=TIMEOUT,
                    connect_timeout=TIMEOUT,
                    pool_timeout=TIMEOUT
                )

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–∞—Ö
                await update.message.reply_html(
                    lang.get(language, 'other_bots'),
                    disable_web_page_preview=True
                )

            try:
                os.remove(video_path)
            except Exception as e:
                logger.error(f"Error deleting file: {e}")
        else:
            await update.message.reply_html(lang.get(language, 'not_found'))

    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await update.message.reply_html(lang.get(language, 'error'))


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)

    if isinstance(update, Update) and update.message:
        user_data = context.user_data
        language = get_user_language(user_data)
        await update.message.reply_html(lang.get(language, 'error'))


def main() -> None:
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    application = Application.builder().token('7932522478:AAGP845ZDncxtJ-qhVU3T1VTpbIamEelOIw').build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(language_selection, pattern='^lang_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting YouTube Downloader Bot...")
    application.run_polling(
        poll_interval=0.5,
        timeout=TIMEOUT,
        drop_pending_updates=True
    )


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs('downloads', exist_ok=True)
    main()